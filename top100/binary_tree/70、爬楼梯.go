package binary_tree

/*
假设你正在爬楼梯。需要 n 阶你才能到达楼顶。

每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？

示例 1：
输入：n = 2
输出：2
解释：有两种方法可以爬到楼顶。
1. 1 阶 + 1 阶
2. 2 阶

示例 2：
输入：n = 3
输出：3
解释：有三种方法可以爬到楼顶。
1. 1 阶 + 1 阶 + 1 阶
2. 1 阶 + 2 阶
3. 2 阶 + 1 阶

提示：

1 <= n <= 45
*/
//时间复杂度 O(n) ： 计算 f(n)f(n)f(n) 需循环 nnn 次，每轮循环内计算操作使用 O(1)O(1)O(1) 。
//空间复杂度 O(1) ： 几个标志变量使用常数大小的额外空间。
func climbStairs(n int) int {
	a, b := 1, 1
	for i := 0; i < n-1; i++ {
		a, b = b, a+b
	}
	return b
}
