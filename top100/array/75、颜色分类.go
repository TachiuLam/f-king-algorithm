package array

/*
给定一个包含红色、白色和蓝色、共 n 个元素的数组 nums ，原地对它们进行排序，使得相同颜色的元素相邻，并按照红色、白色、蓝色顺序排列。

我们使用整数 0、 1 和 2 分别表示红色、白色和蓝色。

必须在不使用库内置的 sort 函数的情况下解决这个问题。

示例 1：
输入：nums = [2,0,2,1,1,0]
输出：[0,0,1,1,2,2]

示例 2：
输入：nums = [2,0,1]
输出：[0,1,2]

提示：

n == nums.length
1 <= n <= 300
nums[i] 为 0、1 或 2
*/
// 三路快排
//解题步骤
//分别设置两个索引 zero 和 two，保证下标 0 到 zero 对应的数组元素都为 0，下标 two 到 numsSize - 1 对应的数组元素都是 2；
//
//设置索引 i 用于遍历整个数组，遍历到 i 个元素的时候，保证下标 zero + 1 到 i - 1 对应的数组元素都是 1；
//
//当索引 i 遍历到元素 1 时，直接将元素 1 纳入到属于 1 的部分，然后继续遍历；
//
//如果遍历到元素 2 时，将 two 前面的索引 two - 1 对应的元素与遍历到的元素 2 交换，将元素 2 纳入到属于 2 的部分；
//
//如果遍历到元素 0 时，交换下标为 zero 后面的索引 zero + 1 对应的元素与遍历到的元素 0，将元素 0 纳入到属于 0 的部分。
func sortColors(nums []int) {
	zero, two := -1, len(nums)
	for i := 0; i < two; {
		if nums[i] == 0 {
			zero += 1
			nums[i], nums[zero] = nums[zero], nums[i]
			i++
		} else if nums[i] == 1 {
			i++
		} else if nums[i] == 2 {
			two -= 1
			nums[i], nums[two] = nums[two], nums[i]
		}
	}
}
